{"remainingRequest":"E:\\myvue\\vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\myvue\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\myvue\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\myvue\\vue\\src\\components\\trainpage\\request.vue?vue&type=template&id=7ee115b7&scoped=true&","dependencies":[{"path":"E:\\myvue\\vue\\src\\components\\trainpage\\request.vue","mtime":1619440297850},{"path":"E:\\myvue\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\myvue\\vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\myvue\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\myvue\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}